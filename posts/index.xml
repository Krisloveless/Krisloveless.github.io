<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on lov31ess.py</title>
    <link>https://krisloveless.github.io/posts/</link>
    <description>Recent content in Posts on lov31ess.py</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 01 Oct 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://krisloveless.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>C&#43;&#43; note(10)</title>
      <link>https://krisloveless.github.io/2019/10/c-note10/</link>
      <pubDate>Tue, 01 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://krisloveless.github.io/2019/10/c-note10/</guid>
      <description>static variable Static members are not associated with class objects!!
class Something { public: static int s_value; }; int Something::s_value = 1; int main() { Something first; Something second; first.s_value = 2; std::cout &amp;lt;&amp;lt; first.s_value &amp;lt;&amp;lt; &#39;\n&#39;; // produce 2 std::cout &amp;lt;&amp;lt; second.s_value &amp;lt;&amp;lt; &#39;\n&#39;; // produce 2 return 0; }  class Something { private: static int s_idGenerator; int m_id; public: Something() { m_id = s_idGenerator++; } // grab the next value from the id generator int getID() const { return m_id; } }; // Note that we&#39;re defining and initializing s_idGenerator even though it is declared as private above.</description>
    </item>
    
    <item>
      <title>C&#43;&#43; note(9)</title>
      <link>https://krisloveless.github.io/2019/09/c-note9/</link>
      <pubDate>Tue, 17 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://krisloveless.github.io/2019/09/c-note9/</guid>
      <description>#include &amp;lt;iostream&amp;gt; struct DateStruct { int year; int month; int day; }; void print(DateStruct &amp;amp;date) { std::cout &amp;lt;&amp;lt; date.year &amp;lt;&amp;lt; &amp;quot;/&amp;quot; &amp;lt;&amp;lt; date.month &amp;lt;&amp;lt; &amp;quot;/&amp;quot; &amp;lt;&amp;lt; date.day; } int main() { DateStruct today { 2020, 10, 14 }; // use uniform initialization today.day = 16; // use member selection operator to select a member of the struct print(today); return 0; }  #include &amp;lt;iostream&amp;gt; class DateClass { public: int m_year; int m_month; int m_day; void print() { std::cout &amp;lt;&amp;lt; m_year &amp;lt;&amp;lt; &amp;quot;/&amp;quot; &amp;lt;&amp;lt; m_month &amp;lt;&amp;lt; &amp;quot;/&amp;quot; &amp;lt;&amp;lt; m_day; } }; int main() { DateClass today { 2020, 10, 14 }; today.</description>
    </item>
    
    <item>
      <title>C&#43;&#43; note(8)</title>
      <link>https://krisloveless.github.io/2019/09/c-note8/</link>
      <pubDate>Wed, 11 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://krisloveless.github.io/2019/09/c-note8/</guid>
      <description>Mixing return references and values int returnByValue() { return 5; } int&amp;amp; returnByReference() { static int x = 5; // static ensures x isn&#39;t destroyed when the function ends return x; } int main() { int value = returnByReference(); // case A -- ok, treated as return by value int &amp;amp;ref = returnByValue(); // case B -- compile error since the value is an r-value, and an r-value can&#39;t bind to a non-const reference const int &amp;amp;cref = returnByValue(); // case C -- ok, the lifetime of the return value is extended to the lifetime of cref }  Returning multiple values  #include &amp;lt;tuple&amp;gt; #include &amp;lt;iostream&amp;gt; std::tuple&amp;lt;int, double&amp;gt; returnTuple() // return a tuple that contains an int and a double { return std::make_tuple(5, 6.</description>
    </item>
    
    <item>
      <title>C&#43;&#43; note(7)</title>
      <link>https://krisloveless.github.io/2019/09/c-note7/</link>
      <pubDate>Tue, 03 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://krisloveless.github.io/2019/09/c-note7/</guid>
      <description>typeid() is in &amp;lt;typeinfo&amp;gt; Control flow Halt -&amp;gt; exit(0)
Note that the if statement only executes a single statement if the expression is true, and the else only executes a single statement if the expression is false. In order to execute multiple statements, we can use a block {}
something about switch switch (1) { int a; // okay, declaration is allowed before the case labels int b = 5; // illegal, initialization is not allowed before the case labels case 1: int y; // okay, declaration is allowed within a case y = 4; // okay, this is an assignment break; case 2: y = 5; // okay, y was declared above, so we can use it here too break; case 3: int z = 4; // illegal, initialization is not allowed within a case break; default: std::cout &amp;lt;&amp;lt; &amp;quot;default case&amp;quot; &amp;lt;&amp;lt; std::endl; break; }  goto should be shunned (avoid) #include &amp;lt;iostream&amp;gt; #include &amp;lt;cmath&amp;gt; // for sqrt() function int main() { double x; tryAgain: // this is a statement label std::cout &amp;lt;&amp;lt; &amp;quot;Enter a non-negative number&amp;quot;; std::cin &amp;gt;&amp;gt; x; if (x &amp;lt; 0.</description>
    </item>
    
    <item>
      <title>C&#43;&#43; note(6)</title>
      <link>https://krisloveless.github.io/2019/08/c-note6/</link>
      <pubDate>Mon, 05 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://krisloveless.github.io/2019/08/c-note6/</guid>
      <description>extern global.cpp
// define two global variables // non-const globals have external linkage by default int g_x; // external linkage by default extern int g_y(2); // external linkage by default, so this extern is redundant and ignored // in this file, g_x and g_y can be used anywhere beyond this point  main.cpp
extern int g_x; // forward declaration for g_x (defined in global.cpp) -- g_x can now be used beyond this point in this file int main() { extern int g_y; // forward declaration for g_y (defined in global.</description>
    </item>
    
    <item>
      <title>C&#43;&#43; note(5)</title>
      <link>https://krisloveless.github.io/2019/08/c-note5/</link>
      <pubDate>Sun, 04 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://krisloveless.github.io/2019/08/c-note5/</guid>
      <description>A very good function for pow int pow(int base, int exp) { int result = 1; while (exp) { if (exp &amp;amp; 1) result *= base; exp &amp;gt;&amp;gt;= 1; base *= base; } return result; }  Comma operator Comma , x, y Evaluate x then y, returns value of y
int x = 0; int y = 2; int z = (++x, ++y); // increment x and y, z is 3  Converting decimal to binary Converting -76 to binary:</description>
    </item>
    
    <item>
      <title>C&#43;&#43; note(4)</title>
      <link>https://krisloveless.github.io/2019/08/c-note4/</link>
      <pubDate>Thu, 01 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://krisloveless.github.io/2019/08/c-note4/</guid>
      <description>The smallest unit of memory is a binary digit (also called a **bit)
Memory is organized into sequential units called memory addresses (or addresses for short).
Integer vs. Integral Integers are a specific data type that hold positive and negative whole numbers, including 0. The term “integral types” (which means “like an integer”) includes all of the boolean, characters, and integer types (and thus is a bit broader in definition).</description>
    </item>
    
    <item>
      <title>C&#43;&#43; note(3)</title>
      <link>https://krisloveless.github.io/2019/07/c-note3/</link>
      <pubDate>Wed, 31 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://krisloveless.github.io/2019/07/c-note3/</guid>
      <description>Errors A syntax error occurs when you write a statement that is not valid according to the grammar of the C++ language.
A semantic error occurs when a statement is syntactically valid, but does not do what the programmer intended.
Enable Debug #include &amp;lt;iostream&amp;gt; #define ENABLE_DEBUG // comment out to disable debugging int getUserInput() { #ifdef ENABLE_DEBUG std::cerr &amp;lt;&amp;lt; &amp;quot;getUserInput() called\n&amp;quot;; #endif std::cout &amp;lt;&amp;lt; &amp;quot;Enter a number: &amp;quot;; int x; std::cin &amp;gt;&amp;gt; x; return x; } int main() { #ifdef ENABLE_DEBUG std::cerr &amp;lt;&amp;lt; &amp;quot;main() called\n&amp;quot;; #endif int x = getUserInput(); std::cout &amp;lt;&amp;lt; &amp;quot;You entered: &amp;quot; &amp;lt;&amp;lt; x; return 0; }  Add watch &amp;amp; call stack add watch is a useful function to visualize value while debugging.</description>
    </item>
    
    <item>
      <title>C&#43;&#43; note(2)</title>
      <link>https://krisloveless.github.io/2019/07/c-note2/</link>
      <pubDate>Tue, 30 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://krisloveless.github.io/2019/07/c-note2/</guid>
      <description>User-defined function Functions that you write yourself are called user-defined functions.
Local variables &amp;amp; lifetime Function parameters, as well as variables defined inside the function body, are called local variables.
an object’s lifetime is defined to be the time between its creation and destruction.
Forward declaration int add(int, int); A forward declaration allows us to tell the compiler about the existence of an identifier before actually defining the identifier.</description>
    </item>
    
    <item>
      <title>C&#43;&#43; note(1)</title>
      <link>https://krisloveless.github.io/2019/07/c-note1/</link>
      <pubDate>Mon, 29 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://krisloveless.github.io/2019/07/c-note1/</guid>
      <description>The initalization int width = 5;: copy initialization
int width(5); : direct initialization
int width{}/*zero initialization*/;int width{5}/*explicit initialization*/;int width{4.5}; : uniform initialization,{} will get 0 init, 4.5 with issue an error.
std:endl Using std::endl can be a bit inefficient, as it actually does two jobs: it moves the cursor to the next line, and it “flushes” the output which &amp;lsquo;\n&amp;rsquo; won&amp;rsquo;t Prefer ‘\n’ over std::endl when outputting text to the console.</description>
    </item>
    
    <item>
      <title>Cheatsheets</title>
      <link>https://krisloveless.github.io/2019/07/cheatsheets/</link>
      <pubDate>Sun, 21 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://krisloveless.github.io/2019/07/cheatsheets/</guid>
      <description> These are some useful R materials for beginners. Keep updating. Originated from Rstudio.com.
Base R </description>
    </item>
    
  </channel>
</rss>