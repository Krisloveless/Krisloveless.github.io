<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on lov31ess.py</title>
    <link>https://krisloveless.github.io/posts/</link>
    <description>Recent content in Posts on lov31ess.py</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© 2019 lov31ess. All Rights Reserved</copyright>
    <lastBuildDate>Wed, 04 Sep 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://krisloveless.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>C&#43;&#43; note(5)</title>
      <link>https://krisloveless.github.io/2019/09/c---note5/</link>
      <pubDate>Wed, 04 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://krisloveless.github.io/2019/09/c---note5/</guid>
      <description>A very good function for pow int pow(int base, int exp) { int result = 1; while (exp) { if (exp &amp;amp; 1) result *= base; exp &amp;gt;&amp;gt;= 1; base *= base; } return result; }  Comma operator Comma , x, y Evaluate x then y, returns value of y
int x = 0; int y = 2; int z = (++x, ++y); // increment x and y, z is 3  Converting decimal to binary Converting -76 to binary:</description>
    </item>
    
    <item>
      <title>C&#43;&#43; note(4)</title>
      <link>https://krisloveless.github.io/2019/08/c---note4/</link>
      <pubDate>Thu, 01 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://krisloveless.github.io/2019/08/c---note4/</guid>
      <description>The smallest unit of memory is a binary digit (also called a **bit)
Memory is organized into sequential units called memory addresses (or addresses for short).
Integer vs. Integral Integers are a specific data type that hold positive and negative whole numbers, including 0. The term “integral types” (which means “like an integer”) includes all of the boolean, characters, and integer types (and thus is a bit broader in definition).</description>
    </item>
    
    <item>
      <title>C&#43;&#43; note(3)</title>
      <link>https://krisloveless.github.io/2019/07/c---note3/</link>
      <pubDate>Wed, 31 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://krisloveless.github.io/2019/07/c---note3/</guid>
      <description>Errors A syntax error occurs when you write a statement that is not valid according to the grammar of the C++ language.
A semantic error occurs when a statement is syntactically valid, but does not do what the programmer intended.
Enable Debug #include &amp;lt;iostream&amp;gt; #define ENABLE_DEBUG // comment out to disable debugging int getUserInput() { #ifdef ENABLE_DEBUG std::cerr &amp;lt;&amp;lt; &amp;quot;getUserInput() called\n&amp;quot;; #endif std::cout &amp;lt;&amp;lt; &amp;quot;Enter a number: &amp;quot;; int x; std::cin &amp;gt;&amp;gt; x; return x; } int main() { #ifdef ENABLE_DEBUG std::cerr &amp;lt;&amp;lt; &amp;quot;main() called\n&amp;quot;; #endif int x = getUserInput(); std::cout &amp;lt;&amp;lt; &amp;quot;You entered: &amp;quot; &amp;lt;&amp;lt; x; return 0; }  Add watch &amp;amp; call stack add watch is a useful function to visualize value while debugging.</description>
    </item>
    
    <item>
      <title>C&#43;&#43; note(2)</title>
      <link>https://krisloveless.github.io/2019/07/c---note2/</link>
      <pubDate>Tue, 30 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://krisloveless.github.io/2019/07/c---note2/</guid>
      <description>User-defined function Functions that you write yourself are called user-defined functions.
Local variables &amp;amp; lifetime Function parameters, as well as variables defined inside the function body, are called local variables.
an object’s lifetime is defined to be the time between its creation and destruction.
Forward declaration int add(int, int); A forward declaration allows us to tell the compiler about the existence of an identifier before actually defining the identifier.</description>
    </item>
    
    <item>
      <title>C&#43;&#43; note(1)</title>
      <link>https://krisloveless.github.io/2019/07/c---note1/</link>
      <pubDate>Mon, 29 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://krisloveless.github.io/2019/07/c---note1/</guid>
      <description>The initalization int width = 5;: copy initialization
int width(5); : direct initialization
int width{}/*zero initialization*/;int width{5}/*explicit initialization*/;int width{4.5}; : uniform initialization,{} will get 0 init, 4.5 with issue an error.
std:endl Using std::endl can be a bit inefficient, as it actually does two jobs: it moves the cursor to the next line, and it “flushes” the output which &amp;lsquo;\n&amp;rsquo; won&amp;rsquo;t Prefer ‘\n’ over std::endl when outputting text to the console.</description>
    </item>
    
    <item>
      <title>Cheatsheets</title>
      <link>https://krisloveless.github.io/2019/07/cheatsheets/</link>
      <pubDate>Sun, 21 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://krisloveless.github.io/2019/07/cheatsheets/</guid>
      <description> These are some useful R materials for beginners. Keep updating. Originated from Rstudio.com.
Base R </description>
    </item>
    
  </channel>
</rss>